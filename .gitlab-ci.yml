stages:
  - lint
  - build
  - test
  - trigger
  - package

variables:
  MAKEFILE_PATH: $CI_PROJECT_DIR/build/Makefile
  PYTHON_IMAGE_VERSION: "3.10"
  SAMPLES_BRANCH: "master"
  DEPENDABOT_VERSION: latest

# Other possible variables:
# * for samples:
#   - TRIGGER_SAMPLES should be set to "true" when triggering the pipeline from the web UI when you want to trigger the samples
#   - PYTHON_SAMPLES_WHITELIST to specify only a set of python samples to run
#   - PYTHON_SAMPLES_BLACKLIST to specify set of python samples that should not be run run
#   - API_ENDPOINT for the compute api endpoint
#   - API_TOKEN for the compute api user token
#   - STORAGE_ENDPOINT for the storage api endpoint

default:
  image: python:$PYTHON_IMAGE_VERSION


workflow:
  rules:
    # Run scheduled pipelines
    - if: $CI_PIPELINE_SOURCE == "schedule"
    # Run pipelines triggered from the web UI
    - if: $CI_PIPELINE_SOURCE == "web"
    # Run pipelines when triggered by webhooks or by API calls (for Draft: workaround)
    - if: $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "api"
    # Do not run pipelines on *-nocheck branches, even in a MR
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-nocheck$/
      when: never
    # Run pipelines on MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Run pipelines only on master branch
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # Run pipelines on tags
    - if: $CI_COMMIT_TAG

cache:
  key: python-env
  untracked: true
  paths:
    - venv

.default_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $PACKAGE_MANAGER_SET
      when: never
    - !reference [workflow, rules]

.dependabot_rules: &dependabot_rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $PACKAGE_MANAGER_SET

.dependabot_pip_rules: &dependabot_pip_rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $PACKAGE_MANAGER_SET == "pip"

.samples_rules:
  rules:
    # Run pipelines triggered from the web UI
    - if: $CI_PIPELINE_SOURCE == "web" && $TRIGGER_SAMPLES == "true"
    # Run pipelines on tags
    - if: $CI_COMMIT_TAG
    # If files changed in commit or MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
      changes:
        paths:
          - qarnot/**/*
          - setup.py

.prepare-python-env:
  before_script:
    - python3 --version
    - if ! [[ -d venv ]]; then python3 -m venv venv; fi;
    - source venv/bin/activate
    - pip3 install -r requirements.txt
    - pip3 install -r $EXTRA_REQUIREMENTS_FILE

.run_multiple_python_version: &multiple_python_version
  parallel:
    matrix:
      - PYTHON_IMAGE_VERSION: ['3.10', '3.11', '3.12', 'latest']



# --- Building & Linting --- #

# There's no building for a python app

prepare_dependabot_file:
  stage: build
  <<: *dependabot_rules
  script:
    - |
      echo "
      version: 2
      updates:
        open-pull-requests-limit: ${DEPENDABOT_MR_LIMIT:-5}
        assignees:
          - ${DEPENDABOT_MR_ASSIGNEE:-'chloe.gourrat'}"  > .gitlab/dependabot-base.yml
  artifacts:
    paths:
      - .gitlab/dependabot-base.yml

.dependabot:
  image:
    name: docker.io/andrcuns/dependabot-gitlab-${PACKAGE_MANAGER}:${DEPENDABOT_VERSION}
    entrypoint: [""]
  needs:
    - job: prepare_dependabot_file
      artifacts: true
  variables:
    GIT_STRATEGY: none
    RAILS_ENV: production
    SECRET_KEY_BASE: key
    SETTINGS__GITLAB_URL: $CI_SERVER_URL
    SETTINGS__STANDALONE: "true"
    SETTINGS__LOG_COLOR: "true"
    SETTINGS__LOG_LEVEL: debug
    SETTINGS__CONFIG_BASE_FILENAME: $CI_PROJECT_DIR/.gitlab/dependabot-base.yml
  before_script:
    - cd /home/dependabot/app
  script:
    - bundle exec rake "dependabot:update[$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME,$PACKAGE_MANAGER,/]" --trace

pip-dependabot:
  extends: .dependabot
  <<: *dependabot_pip_rules
  variables:
    PACKAGE_MANAGER: pip

lint_python_sdk:
  <<: *multiple_python_version
  stage: lint
  rules:
    - !reference [.default_rules, rules]
  variables:
    EXTRA_REQUIREMENTS_FILE: requirements-lint.txt
  before_script:
    - !reference [.prepare-python-env, before_script]
  script:
    - make -f $MAKEFILE_PATH lint
  allow_failure: true # to have only a warning and still the tests run even if there is an unfortunate missing whitespace


# --- Testing & Coverage --- #

unit_tests_python_sdk:
  <<: *multiple_python_version
  stage: test
  rules:
    - !reference [.default_rules, rules]
  needs:
    - job: lint_python_sdk
  variables:
    EXTRA_REQUIREMENTS_FILE: requirements-test.txt
  before_script:
    - !reference [.prepare-python-env, before_script]
  script:
    - coverage run --omit="test/*" --source=qarnot -m pytest -v --junitxml=report.xml test
    - coverage xml -o coverage.xml
  artifacts:
    when: always
    expire_in: 1hour
    paths:
      - report.xml
      - coverage.xml
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: 'coverage.xml'

# Trigger samples if sdk changed

trigger_samples:
  stage: trigger
  needs:
    - job: lint_python_sdk
  rules:
    - !reference [.samples_rules, rules]
  variables:
    PYTHON_IMAGE: python:$PYTHON_IMAGE_VERSION
    TRIGGER_SOURCE: "sdk-python"
    PYTHON_SDK_BRANCH_OR_COMMIT: "$CI_COMMIT_SHA"
    SAMPLES_CONF_API_URL: $API_ENDPOINT
    SAMPLES_CONF_TOKEN: $API_TOKEN
    SAMPLES_CONF_STORAGE_URL: $STORAGE_ENDPOINT
  trigger:
    project: sdk/sdks-samples
    branch: $SAMPLES_BRANCH
    strategy: depend


# --- Packaging --- #

package-python-sdk:
  <<: *multiple_python_version
  stage: package
  rules:
    # Run pipelines on tags
    - if: $CI_COMMIT_TAG
  needs:
    - unit_tests_python_sdk
    - trigger_samples
  variables:
    EXTRA_REQUIREMENTS_FILE: requirements-doc.txt
  before_script:
    - !reference [.prepare-python-env, before_script]
  script:
    - python setup.py sdist
    - echo "Sdk version:" && python -c "import qarnot; print(qarnot.__version__)"
  artifacts:
    paths:
      - dist
    expire_in: 1hour


# --- SDK Documentation generation --- #

generate-doc-python-sdk:
  stage: package
  rules:
    - !reference [.default_rules, rules]
  needs:
    - job: lint_python_sdk
  variables:
    EXTRA_REQUIREMENTS_FILE: requirements-doc.txt
  before_script:
    - !reference [.prepare-python-env, before_script]
  script:
    - make -f $MAKEFILE_PATH doc
  artifacts:
    paths:
      - doc/_build
    expire_in: 1hour

